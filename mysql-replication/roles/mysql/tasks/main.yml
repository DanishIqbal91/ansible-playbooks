---
# Playbook for MySQL servers with replication

#
# Install packages
#

- name: create directory to store rpms
  file: path={{ rpm_download_dir}} state=directory

- name: download mysql rpms
  get_url: url={{ mysql_url }}/{{ item }} dest={{ rpm_download_dir }}/{{ item }}
  with_items: mysql_rpms

- name: make rpm paths
  shell: echo {{ rpm_download_dir }}/{{ item }}
  with_items: mysql_rpms
  register: rpm_paths

- name: install mysql rpms
  yum: name={{ item.stdout }} state=installed
  with_items: rpm_paths.results

- name: install MySQL-python module
  yum: name=MySQL-python state=installed

- name: copy the my.cnf file
  action: template src=my.cnf.j2 dest={{ mysql_conf_dir }}/my.cnf owner=root mode=0644
  notify: restart mysql

- name: touch the mysql-slow.log file
  file: path={{ mysql_slow_log }} owner=mysql mode=0644 state=touch

- name: start mysql service
  service: name={{ mysql_service }} state=started enabled=yes

#
# Change credentials for root
#

- name: check if .mysql_secret does not exist
  shell: test ! -e /root/.mysql_secret
  register: mysql_secret_not_exist
  ignore_errors: True

- name: get mysql initial password
  shell: cat /root/.mysql_secret | awk '{print $18}'
  register: mysql_default_password
  when: mysql_secret_not_exist|failed

- debug: msg="mysql default root password is [{{ mysql_default_password.stdout }}]"
  when: mysql_secret_not_exist|failed

- name: update mysql root password
  command: /usr/bin/mysqladmin -uroot -p'{{ mysql_default_password.stdout }}' password '{{ mysql_root_db_pass }}'
  when: mysql_secret_not_exist|failed

- name: delete .mysql_secret
  file: path=/root/.mysql_secret state=absent
  when: mysql_secret_not_exist|failed

- name: copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600

#
# Setup users
#

- name: ensure anonymous users are not in the database
  mysql_user: name='' state=absent

- name: create the database users
  mysql_user: name={{ item.name }} host={{ item.host }} password={{ item.pass }} priv={{ item.priv }} state=present
  with_items: mysql_users
  when: mysql_users|lower() != 'none'

- name: create the replication users
  mysql_user: name={{ item.name }} host='%' password={{ item.pass }}
                priv=*.*:"REPLICATION SLAVE" state=present
  with_items: mysql_repl_user
  when: mysql_repl_role == 'master'

#
# Create database
#

- name: remove the test database
  action: mysql_db db=test state=absent

- name: create the databases
  mysql_db: name={{ item.name }} state=present
  with_items: mysql_db
  when: mysql_db|lower() != 'none'

#
# Replication settings
#

- name: check if slave is already configured for replication
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'

- name: get the current master servers replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: change the master in slave to start the replication
  mysql_replication: >
    mode=changemaster
    master_host={{ mysql_repl_master }}
    master_user={{ mysql_repl_user[0].name }}
    master_password={{ mysql_repl_user[0].pass }}
    master_log_file={{ repl_stat.File }}
    master_log_pos={{ repl_stat.Position }}
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
  ignore_errors: True

- name: start replication
  mysql_replication: mode=startslave
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
